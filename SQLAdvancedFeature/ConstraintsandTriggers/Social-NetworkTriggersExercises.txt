Write a trigger that makes new students named 'Friendly' automatically like everyone else in their grade. That is, after the trigger runs, we should have ('Friendly', A) in the Likes table for every other Highschooler A in the same grade as 'Friendly'.
Your triggers are created in SQLite, so you must conform to the trigger constructs supported by SQLite.


create trigger q1
after insert on HighSchooler
when (new.name = 'Friendly')
begin
    insert into Likes 
        select distinct new.ID, H.ID from Highschooler as H 
        where H.grade = new.grade and new.ID <> H.ID;
end


Write one or more triggers to manage the grade attribute of new Highschoolers. If the inserted tuple has a value less than 9 or greater than 12, change the value to NULL. On the other hand, if the inserted tuple has a null value for grade, change it to 9. 
Your triggers are created in SQLite, so you must conform to the trigger constructs supported by SQLite.
To create more than one trigger, separate the triggers with a vertical bar (|).

after insert on Highschooler
for each row
when new.grade < 9 or new.grade > 12
begin
    update Highschooler set grade = null where Highschooler.ID = new.ID;
end    

|

create trigger q2_2
after insert on Highschooler
for each row
when new.grade is null
begin 
    update Highschooler set grade = 9 where Highschooler.ID=new.ID;
end



Write one or more triggers to maintain symmetry in friend relationships. Specifically, if (A,B) is deleted from Friend, then (B,A) should be deleted too. If (A,B) is inserted into Friend then (B,A) should be inserted too. Don't worry about updates to the Friend table. 
Your triggers are created in SQLite, so you must conform to the trigger constructs supported by SQLite.

create trigger q6
after update on likes
when new.ID1 = old.ID1 and new.ID2 <> old.ID2
begin
    delete from Friend where ID1 = new.ID2 and ID2 = old.ID2;
    delete from Friend where ID1 = old.ID2 and ID2 = new.ID2;
end
To create more than one trigger, separate the triggers with a vertical bar (|).


create trigger q3_1
after delete on Friend 
begin 
     delete from Friend where Friend.ID1 = old.ID2 and Friend.ID2 = old.ID1;
end
|
create trigger q3_2
after insert on Friend 
begin 
     insert into Friend values (new.ID2, new.ID1);
end

Write a trigger that automatically deletes students when they graduate, i.e., when their grade is updated to exceed 12. 
Your triggers are created in SQLite, so you must conform to the trigger constructs supported by SQLite.

create trigger q4
after update on Highschooler
begin 
    delete from Highschooler where Highschooler.grade>12;
end


Write a trigger that automatically deletes students when they graduate, i.e., when their grade is updated to exceed 12 (same as Question 4). In addition, write a trigger so when a student is moved ahead one grade, then so are all of his or her friends. 
Your triggers are created in SQLite, so you must conform to the trigger constructs supported by SQLite.
To create more than one trigger, separate the triggers with a vertical bar (|).

create trigger q5_1
after update on Highschooler
begin 
    delete from Highschooler where Highschooler.grade>12;
end
|
create trigger q5_2
after update on Highschooler
begin 
    update Highschooler set grade=grade+1 where Highschooler.ID in(select ID2 from Friend where Friend.ID1=new.ID);
end

