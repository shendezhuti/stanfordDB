Write an instead-of trigger that enables updates to the title attribute of view LateRating. 

Policy: Updates to attribute title in LateRating should update Movie.title for the corresponding movie. (You may assume attribute mID is a key for table Movie.) Make sure the mID attribute of view LateRating has not also been updated -- if it has been updated, don't make any changes. Don't worry about updates to stars or ratingDate.
Remember you need to use an instead-of trigger for view modifications as supported by SQLite.


create trigger q1
instead of update of title on LateRating 
begin 
     update Movie
     set title=new.title
     where mID=new.mID;
end


Write an instead-of trigger that enables updates to the stars attribute of view LateRating. 

Policy: Updates to attribute stars in LateRating should update Rating.stars for the corresponding movie rating. (You may assume attributes [mID,ratingDate] together are a key for table Rating.) Make sure the mID and ratingDate attributes of view LateRating have not also been updated -- if either one has been updated, don't make any changes. Don't worry about updates to title.
Remember you need to use an instead-of trigger for view modifications as supported by SQLite.

create trigger q2
instead of update of stars on LateRating
when old.mID = new.mID and old.ratingDate = new.ratingDate
begin
    update Rating
    set stars = new.stars
    where mID = new.mID and ratingDate = new.ratingDate;
end


Write an instead-of trigger that enables updates to the mID attribute of view LateRating. 

Policy: Updates to attribute mID in LateRating should update Movie.mID and Rating.mID for the corresponding movie. Update all Rating tuples with the old mID, not just the ones contributing to the view. Don't worry about updates to title, stars, or ratingDate.
Remember you need to use an instead-of trigger for view modifications as supported by SQLite.

create trigger q3
instead of update of mID on LateRating
begin 
   update Rating
    set mID = new.mID
    where mID = old.mID;
    
    update Movie
    set mID = new.mID
    where mID = old.mID;
end



Finally, write a single instead-of trigger that combines all three of the previous triggers to enable simultaneous updates to attributes mID, title, and/or stars in view LateRating. Combine the view-update policies of the three previous problems, with the exception that mID may now be updated. Make sure the ratingDate attribute of view LateRating has not also been updated -- if it has been updated, don't make any changes.
Remember you need to use an instead-of trigger for view modifications as supported by SQLite



create trigger q4
instead of update on LateRating
when new.ratingDate = old.ratingDate
begin
    update Rating
    set mID = new.mID
    where mID = old.mID and old.mID <> new.mID;
    
    update Movie
    set mID = new.mID
    where mID = old.mID and old.mID <> new.mID;
    
    update Rating
    set stars = new.stars
    where mID = new.mID and ratingDate = new.ratingDate and 
    old.stars <> new.stars;
    
    update Movie
    set title = new.title
    where mID = new.mID and new.title <> old.title;
end



Write an instead-of trigger that enables deletions from view HighlyRated. 

Policy: Deletions from view HighlyRated should delete all ratings for the corresponding movie that have stars > 3.
Remember you need to use an instead-of trigger for view modifications as supported by SQLite.


create trigger q5
instead of delete on HighlyRated
begin 
    delete from Rating 
    where mID=old.mID and stars>3;
end

Write an instead-of trigger that enables deletions from view HighlyRated. 

Policy: Deletions from view HighlyRated should update all ratings for the corresponding movie that have stars > 3 so they have stars = 3.
Remember you need to use an instead-of trigger for view modifications as supported by SQLite.


create trigger ex6
instead of delete on HighlyRated
begin
    update Rating set stars = 3 where mID = old.mID and stars > 3;
end



Write an instead-of trigger that enables insertions into view HighlyRated. 

Policy: An insertion should be accepted only when the (mID,title) pair already exists in the Movie table. (Otherwise, do nothing.) Insertions into view HighlyRated should add a new rating for the inserted movie with rID = 201, stars = 5, and NULL ratingDate.
Remember you need to use an instead-of trigger for view modifications as supported by SQLite.


create trigger q7
instead of insert on HighlyRated
when ((select count(*) from Movie as M where M.mID = new.mID and M.title = new.title) > 0)
begin
    insert into Rating values (201, new.mID, 5, NULL);
end


Write an instead-of trigger that enables insertions into view NoRating. 

Policy: An insertion should be accepted only when the (mID,title) pair already exists in the Movie table. (Otherwise, do nothing.) Insertions into view NoRating should delete all ratings for the corresponding movie.
Remember you need to use an instead-of trigger for view modifications as supported by SQLite.


create trigger ex8
instead of insert on NoRating
when ((select count(*) from Movie as M where M.mID = new.mID and M.title = new.title) > 0)
begin
    delete from Rating where mID = new.mID; 
end

Write an instead-of trigger that enables deletions from view NoRating. 

Policy: Deletions from view NoRating should delete the corresponding movie from the Movie table.
Remember you need to use an instead-of trigger for view modifications as supported by SQLite.

create trigger q9
instead of delete on NoRating
begin
    delete from Movie 
       where mID=old.mID;
end


Write an instead-of trigger that enables deletions from view NoRating. 

Policy: Deletions from view NoRating should add a new rating for the deleted movie with rID = 201, stars = 1, and NULL ratingDate.
Remember you need to use an instead-of trigger for view modifications as supported by SQLite.

create trigger q10
instead of delete on NoRating
when ((select count(*) from Movie as M where M.mID = old.mID and M.title = old.title) > 0)
begin 
    insert into Rating values(201,old.mID,1,Null);
  end

  